#include <bits/stdc++.h>

/*************************************************************

    Following is the LinkedListNode class structure

    template <typename T>   
    class LinkedListNode
    {
        public:
        T data;
        LinkedListNode<T> *next;
        LinkedListNode<T> *random;
        LinkedListNode(T data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

*************************************************************/
void insertAtTail(LinkedListNode<int>* &clone_head,LinkedListNode<int>* &clone_tail,int value){
    LinkedListNode<int>* temp=new LinkedListNode<int>(value);
    if(clone_head==NULL){
        clone_head=temp;
        clone_tail=temp;
        return ;
    }
    else{
        clone_tail->next=temp;
        clone_tail=temp;
    }
}

LinkedListNode<int> *cloneRandomList(LinkedListNode<int> *head)
{
    // Write your code here.
    //step1: Create clone List

    LinkedListNode<int>* temp=head;
    LinkedListNode<int>* clone_head=NULL;
    LinkedListNode<int>* clone_tail=NULL;
    while(temp!=NULL){
        int value=temp->data;
        insertAtTail(clone_head,clone_tail, value);
        temp=temp->next;
    }

    //step2: map original with clone
    temp=head;
    LinkedListNode<int>* clone_temp=clone_head;
    while(temp!=NULL && clone_temp!=NULL){
        LinkedListNode<int>* next=temp->next;
        temp->next=clone_temp;
        temp=next;

        next=clone_temp->next;
        clone_temp->next= temp;
        clone_temp=next;
    }

    //step3: random pointer assigning
    temp=head;
    while(temp!=nullptr){
        if(temp->next!=NULL){
            temp->next->random= temp->random ? temp->random->next : temp->random;
        }
        if(temp->next!=NULL)
         temp=temp->next->next;
    }

    //step4: revert process done in step2
    temp=head;
    clone_temp=clone_head;
    while(temp!=NULL && clone_temp!=NULL){
        temp->next=clone_temp->next;
        temp=temp->next;

        if(temp!=NULL){
            clone_temp->next=temp->next;
        }
        clone_temp=clone_temp->next;
    }

    //step5: return ans;
    return clone_head;
}
