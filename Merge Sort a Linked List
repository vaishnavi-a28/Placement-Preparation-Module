/********************************************************************

    Following is the representation of the Singly Linked List Node:

    class node{
        public:
            int data;
            node * next;
            node(int data){
                this->data=data;
                this->next=NULL;
            }
    };
    
********************************************************************/

node* getmid(node* head){
    node* slow=head;
    node* fast=head->next;
    while(fast!=NULL && fast->next!=NULL){
        fast=fast->next->next;
        slow=slow->next;
    }
    return slow;
}

node* merge(node* first,node* second){
    if(first->next==NULL){
        first->next=second;
        return first;
    }
    node* curr1=first;
    node* next1=curr1->next;
    node* curr2=second;
    node* next2=curr2->next;

    while(next1!=NULL && curr2!=NULL){
        if((curr1->data<=curr2->data) && (curr2->data<=next1->data)){
            next2=curr2->next;
            curr1->next=curr2;
            curr2->next=next1;
            curr1=curr2;
            curr2=next2;
        }
        else{
            curr1=next1;
            next1=next1->next;
            if(next1==NULL){
                curr1->next=curr2;
                return first;
            }
        }
    }
    return first;
}

node* mergeSort(node *head) {
    // Write your code here.
    //Base Case
    if(head==NULL || head->next==NULL){
        return head;
    }
    node* mid= getmid(head);
    node* left=head;
    node* right=mid->next;
    mid->next=NULL;

    left = mergeSort(left);
    right = mergeSort(right);

    if(left->data<=right->data)
     merge(left,right);
    else
     merge(right,left);

    //return result;
}
