/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */

Node* merge(Node* first, Node* second){
	if(first==NULL){
        return second;
    }
	if(second==NULL)
	 return first;
    
	Node* ans=NULL;
	if(first->data<=second->data){
		ans=first;
		ans->child=merge(first->child,second);
	}
	else{
		ans=second;
		ans->child=merge(first,second->child);
	}
	return ans;
}

Node* flattenLinkedList(Node* head) 
{
	// Write your code here
	if(head==NULL || head->next==NULL)
	 return head;
	Node* right=flattenLinkedList(head->next);
	head->next=NULL;
	Node* ans= merge(right,head);
	return ans;
}
